# Step 1 : Deps image
FROM --platform=linux/amd64 node:22-alpine3.22 AS deps

RUN apk update && apk add --no-cache libc6-compat

ENV HOME=/home/app
WORKDIR $HOME

RUN corepack enable && \
    corepack prepare pnpm@10.11.0 --activate

COPY ./.npmrc.docker /.npmrc
COPY ./pnpm-lock.yaml ./
COPY ./package.json ./
COPY ./turbo.json ./
COPY ./pnpm-workspace.yaml ./
COPY ./.turbo/ ./.turbo/
COPY ./tsconfig.json ./tsconfig.json

COPY ./packages/ ./packages/

# install all deps
RUN pnpm install -w --frozen-lockfile --ignore-scripts

# Step 2 : Builder image
FROM deps AS builder

RUN corepack enable && \
    corepack prepare pnpm@10.11.0 --activate

COPY ./apps/services/ ./apps/services/

RUN pnpm --filter @panels/services... install --frozen-lockfile --prefer-offline --ignore-scripts
RUN pnpm --filter @panels/services... build

# regenerate node_modules with only prod deps
RUN pnpm --filter @panels/services... install --prod --prefer-offline --ignore-scripts --no-optional --frozen-lockfile

# remove pnpm cache
RUN rm -rf /root/.local/share/pnpm/store

# Step 3 : Run image
FROM --platform=linux/amd64 node:22-alpine3.22 AS runner

# dumb-init registers signal handlers for every signal that can be caught && \
RUN apk update && apk add --no-cache dumb-init && \
    apk add curl  # used for healthcheck

ENV NODE_ENV=production
ENV HOME=/home/app

USER node

COPY --chown=node:node --from=builder $HOME/ $HOME/
WORKDIR $HOME/apps/services

ENTRYPOINT ["dumb-init"]

# The container will use environment variables passed at runtime
CMD ["node", "--max-old-space-size=1512" , "--enable-source-maps", "dist/server.js"]
# Step 1 : Deps image
FROM --platform=linux/amd64 node:22-slim AS deps

ENV HOME=/home/app
WORKDIR $HOME

RUN corepack enable && \
    corepack prepare pnpm@10.11.1 --activate

COPY ./.npmrc.docker /.npmrc
COPY ./pnpm-lock.yaml ./
COPY ./package.json ./
COPY ./turbo.json ./
COPY ./pnpm-workspace.yaml ./
COPY ./tsconfig.json ./tsconfig.json
COPY ./packages/ ./packages/

# install all deps
RUN pnpm install -w --frozen-lockfile --ignore-scripts

# Step 2 : Builder image
FROM deps AS builder

RUN corepack enable && \
    corepack prepare pnpm@10.11.1 --activate

COPY ./apps/app/ ./apps/app/

RUN pnpm --filter @panels/app... install --frozen-lockfile --prefer-offline --ignore-scripts
RUN pnpm --filter @panels/app... build

# regenerate node_modules with only prod deps
RUN pnpm --filter @panels/app... install --prod --prefer-offline --ignore-scripts --no-optional --frozen-lockfile

# remove pnpm cache
RUN rm -rf /root/.local/share/pnpm/store

# Step 3 : Run image
FROM --platform=linux/amd64 node:22-slim AS runner

# dumb-init registers signal handlers for every signal that can be caught && \
RUN apt-get update && apt-get install -y dumb-init curl && \
    rm -rf /var/lib/apt/lists/*

ENV NODE_ENV=production
ENV HOME=/home/app

USER node

COPY --chown=node:node --from=builder $HOME/node_modules/ $HOME/node_modules/
COPY --chown=node:node --from=builder $HOME/apps/app/ $HOME/apps/app/
COPY --chown=node:node --from=builder $HOME/packages/ $HOME/packages/

WORKDIR $HOME/apps/app

ENTRYPOINT ["dumb-init"]

# The container will use environment variables passed at runtime
CMD ["npm", "start"]